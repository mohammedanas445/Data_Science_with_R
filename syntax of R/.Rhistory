#############################
primes <- 2
count <- 1
m <- 3
while( count <= 1000){
m.is.prime <- T
for(p in primes){
if(m%%p==0){
m.is.prime <- F
break
}
}
if(m.is.prime){
primes <- c(primes,m)
count <- count+1
m <- m+2
}
}
#########################
primes <- 2
count <- 1
m <- 3
while(count<= 1000){
m.is.prime <- T
for(p in primes){
if(m%%p==0){
m.is.prime = F
break
}
}
if(m.is.prime){
primes <- c(primes, m)
count <- count + 1
}
m = m + 2
}
primes
#############################
primes <- 2
count <- 1
m <- 3
while( count <= 1000){
m.is.prime <- T
for(p in primes){
if(m%%p==0){
m.is.prime <- F
break
}
}
if(m.is.prime){
primes <- c(primes,m)
count <- count+1
m = m+2
}
}
#############################
primes <- 2
count <- 1
m <- 3
while( count <= 1000){
m.is.prime <- T
for(p in primes){
if(m%%p==0){
m.is.prime <- F
break
}
}
if(m.is.prime){
primes <- c(primes,m)
count <- count+1
}
m = m+2
}
primes
fibonacci.numbers=c(1,1)
count=2
while(count<=499){
fibonacci.numbers[count+1]=fibonacci.numbers[count]+fibonacci.numbers[count-1]
count=count+1
}
fibonacci.numbers
#################
fib <- numeric(length = 500)
fib[1] = 1
fib[2] = 1
for(i in 3:500){
fib[i] <- fib[i-1] + fib[i-2]
}
fib
fibonacci.numbers=c(1,1)
count=2
while(count<=499){
fibonacci.numbers[count+1]=fibonacci.numbers[count]+fibonacci.numbers[count-1]
count=count+1
}
fibonacci.numbers
##########################
fibonacci.numbers=c(1,1)
for(count in 2:500){
fibonacci.numbers[count]=fibonacci.numbers[count-1]+fibonacci.numbers[count-2]
}
##########################
fibonacci.numbers=c(1,1)
for(count in 3:500){
fibonacci.numbers[count]=fibonacci.numbers[count-1]+fibonacci.numbers[count-2]
}
fibonacci.numbers
#####################################
cricket <- read.csv("https://dvats.github.io/assets/course/mth208/battingbowling.csv")
allrounder <- (cricket$Bowling<40)&(cricket$Batting>25)
allrounder <-indices((cricket$Bowling<40)&(cricket$Batting>25))
#####################################
cricket <- read.csv("https://dvats.github.io/assets/course/mth208/battingbowling.csv")
allrounder <- indices((cricket$Bowling<40)&(cricket$Batting>25))
allrounder <- which((cricket$Bowling<40)&(cricket$Batting>25))
View(cricket)
allrounder <-cricket(which((cricket$Bowling<40)&(cricket$Batting>25)), )
allrounder <-cricket[which((cricket$Bowling<40)&(cricket$Batting>25)), ]
View(allrounder)
##########################
cricket <- read.csv("https://dvats.github.io/assets/course/mth208/battingbowling.csv")
allRounders  <- cricket[which(cricket$Bowling<40 & cricket$Batting>25), ]
allRounders$Team <- as.factor(allRounders$Team)
teams <- unique(allRounders$Team)
for(t in teams){
count <- sum(allRounders$Team == t)
print(paste(t, count))
}
#####################################
cricket <- read.csv("https://dvats.github.io/assets/course/mth208/battingbowling.csv")
allrounder <-cricket[which((cricket$Bowling<40)&(cricket$Batting>25)), ]
teams<- unique(allrounder$Team)
for(t in teams){
count <- sum(allrounder$Team==t)
paste(t,count)
}
?as.factor
#####################################
cricket <- read.csv("https://dvats.github.io/assets/course/mth208/battingbowling.csv")
allrounder <-cricket[which((cricket$Bowling<40)&(cricket$Batting>25)), ]
teams<- unique(allrounder$Team)
for(t in teams){
count <- sum(allrounder$Team==t)
paste(t,count)
}
##########################
cricket <- read.csv("https://dvats.github.io/assets/course/mth208/battingbowling.csv")
allRounders  <- cricket[which(cricket$Bowling<40 & cricket$Batting>25), ]
allRounders$Team <- as.factor(allRounders$Team)
allRounders$Team
teams <- unique(allRounders$Team)
teams
for(t in teams){
count <- sum(allRounders$Team == t)
print(paste(t, count))
}
###################################
random <- rbinom(n=1000, prob = 0.5)
###################################
random <- rbinom(n=1000,size=1, prob = 0.5)
heads <- mean(random)/1000
###################################
random <- rbinom(n=1000,size=1, prob = 0.5)
heads <- mean(random)
sum(random)
###################################
toses <- rbinom(n=1000, size=1, prob =0.5)
toses
mean(toses)
#####################################
#Q2
#a
sample(x=c(red,red,red,green,green,blue,blue),size = 1, prob = rep(1/7,7))
cricket <- read.csv("https://dvats.github.io/assets/course/mth208/battingbowling.csv")
allrounder <-cricket[which((cricket$Bowling<40)&(cricket$Batting>25)), ]
teams<- unique(allrounder$Team)
max(allrounder$Team)
View(allrounder)
min(allrounder$Team)
table(allrounder$Team)
cricket <- read.csv("https://dvats.github.io/assets/course/mth208/battingbowling.csv")
allrounder <-cricket[which((cricket$Bowling<40)&(cricket$Batting>25)), ]
no_allrounders <- table(allrounder$Team)
no_allrounders
max(no_allrounders)
max(no_allrounders)
as.data.frame(no_allrounders)
x <- as.data.frame(no_allrounders)
x[which(max(x$Freq)),]
x[which(x$Freq=max(x$Freq))),]
x[which(x$Freq==max(x$Freq))),]
x[which(x$Freq==max(x$Freq)),]
x[which(x$Freq==max(x$Freq)),2]
x[which(x$Freq==max(x$Freq)),1]
no_allrounders <- as.data.frame(table(allrounder$Team))
#####################################
cricket <- read.csv("https://dvats.github.io/assets/course/mth208/battingbowling.csv")
allrounder <-cricket[which((cricket$Bowling<40)&(cricket$Batting>25)), ]
no_allrounders <- as.data.frame(table(allrounder$Team))
no_allrounders[which(no_allrounders$Freq=max(no_allrounders$Freq)),1]
no_allrounders[which(no_allrounders$Freq==max(no_allrounders$Freq)),1]
no_allrounders[which(no_allrounders$Freq==min(no_allrounders$Freq)),1]
#####################################
#Q2
#a
sample(x=c(red,red,red,green,green,blue,blue),size = 1, prob = rep(1/7,7))
#####################################
#Q2
#a
sample(x=c("red","red","red","green","green","blue","blue"),size = 1, prob = rep(1/7,7))
#####################################
#Q2
#a
sample(x=c("red","red","red","green","green","blue","blue"),size = 1, prob = rep(1/7,7))
#####################################
#Q2
#a
sample(x=c("red","red","red","green","green","blue","blue"),size = 1, prob = rep(1/7,7))
#####################################
#Q2
#a
sample(x=c("red","red","red","green","green","blue","blue"),size = 1, prob = rep(1/7,7))
#####################################
#Q2
#a
sample(x=c("red","red","red","green","green","blue","blue"),size = 1, prob = rep(1/7,7))
#####################################
#Q2
#a
sample(x=c("red","red","red","green","green","blue","blue"),size = 1, prob = rep(1/7,7))
#####################################
#Q2
#a
sample(x=c("red","red","red","green","green","blue","blue"),size = 1, prob = rep(1/7,7))
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
runif(n =1, min = 0, max = 5)
#c
A <- matrix(c(3,1,-2,4,5,3,-1,2,-2),nrow = 3)
A
A <- matrix(c(3,1,-2,4,5,3,-1,2,-2),nrow = 3)
pi <- c(norm(A[,1]),norm(A[,2]),norm(A[,3]))/(norm(A[,1])+norm(A[,2])+norm(A[,3]))
#c
A <- matrix(c(3,1,-2,4,5,3,-1,2,-2),nrow = 3)
pi <- c(norm(A[,1],2),norm(A[,2],2),norm(A[,3],2))/(norm(A[,1],2)+norm(A[,2],2)+norm(A[,3],2))
?norm
#c
A <- matrix(c(3,1,-2,4,5,3,-1,2,-2),nrow = 3)
pi <- c(norm(A[,1],type = "2"),norm(A[,2], type = "2"),norm(A[,3], type = "2"))/(norm(A[,1],type = "2")+norm(A[,2], type = "2")+norm(A[,3], type = "2"))
sample(c(A[,1],A[,2],A[,3]),size = 1, prob = pi)
sample(c(A[,1],A[,2],A[,3]),size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
sample(1:3,size = 1, prob = pi)
?runif
#a
count <- function(){
randomdraws <- runif(1, min = 0, max = 1)
while(sum(randomdraws)<1){
randomdraws <- c(randomdraws,runif(1, min = 0, max = 1))
}
return(length(randomdraws))
}
#b
vec <- numeric(length = 1000)
for(i in 1:1000){
vec[i]=count()
}
#c
mean(vec)
Question 3
num = function(){
value_till_now = 0
count = 0
while(value_till_now < 1){
value_till_now = value_till_now + runif(1)
count = count +1
}
return(count)
}
values = numeric(length = 1000)
for(i in 1: 1000){
values[i] = num()
}
mean(values)
?sample
#Q4
#a
attempts <- function(age){
candlesleft <- age
numberofattempts=0
while(candlesleft){
candlesleft=candlesleft-sample(1:candlesleft,size = 1)
numberofattempts = numberofattempts+1
}
return(numberofattempts)
}
#b
num1 <- numeric(length = 1000)
for (i in 1:1000) {
num1[i]=attempts(25)
}
#c
mean(num1)
#d
num2 <- numeric(length = 1000)
for (i in 1:1000) {
num2[i]=attempts(30)
}
mean(num2)
# Question 4
candles_recursive = function(n){
if(n==0){
return (0);
}
blown = sample(1:n, 1)
return(1 + candles(n-blown));
}
candles_iterative = function(n){
remaining = n
count = 0
while(remaining > 0){
blown  = sample(1:remaining, 1)
remaining = remaining - blown
count = count +1
}
return(count)
}
values = numeric(length = 1000)
for(i in 1:1000){
values[i] = candles_iterative(25)
}
mean(values)
for(i in 1:1000){
values[i] = candles_recursive(25)
}
candles_recursive = function(n){
if(n==0){
return (0);
}
blown = sample(1:n, 1)
return(1 + candles_recursive(n-blown));
}
candles_iterative = function(n){
remaining = n
count = 0
while(remaining > 0){
blown  = sample(1:remaining, 1)
remaining = remaining - blown
count = count +1
}
return(count)
}
values = numeric(length = 1000)
for(i in 1:1000){
values[i] = candles_iterative(25)
}
mean(values)
for(i in 1:1000){
values[i] = candles_recursive(25)
}
mean(values)
